/*
 * Created on Sep 19, 2005
 */
package edu.muohio.csa.autograder.report;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.List;

import edu.muohio.csa.autograder.AutoGrader;
import edu.muohio.csa.autograder.StudentRecord;
import edu.muohio.csa.autograder.TestResult;
import edu.muohio.csa.autograder.framework.Graded;
import edu.muohio.csa.autograder.framework.GradingException;


public abstract class Reporter  {
	
	public String getPropperStackFrame( GradingException ex ) {
		String properFrame = "";
		boolean saveNext = false;
		
		for( StackTraceElement ste : ex.getStackTrace() ) {
			if ( saveNext ) {
				// assignment01.Assignment1Grader.grade_Test_Return1(Assignment1Grader.java:18)
				properFrame = ste.getClassName() + "." + ste.getMethodName() 
				              + " (" + ste.getFileName() + ":" + ste.getLineNumber() + ")";
					
				break;
			}
			
			if ( ste.getClassName().equals( Graded.class.getCanonicalName() ) ) {
				if ( ste.getMethodName().startsWith("assert") || 
					 ste.getMethodName().startsWith("fail") ) {
					saveNext = true;
				}
			}
		}
		
		return properFrame;
	}
	
	public void writeReport( List<StudentRecord> students ) {
		
		for( StudentRecord student : students ) {
			try {
				OutputStream oStream = getStream( student.getStudentId() );
				
				PrintWriter output = new PrintWriter( oStream, true );
				
				output.println( "Grade report generated by " + AutoGrader.SYS_NAME + " version " + AutoGrader.VER_NAME );
				output.println( "Student: " + student.getStudentName() + 
						       " (" + student.getStudentId() + ")" );
				output.println( "-- Begin Grade Report ----------------------------------------\n\n" );
				
				for( String key : student.getGradingResults().keySet() ) {
					output.println( "** Test Package = " + key );
					
					List<TestResult> testResults = student.getGradingResults().get( key );
					
					if ( testResults.size() > 0 ) {
						output.println( "  class tested: " + 
								       student.getStudentId() + "." +
								       testResults.get(0).getClassName() );
					} else {
						output.println( "  NO TEST RESULTS PRESENT " );
					}
					
					int testCount = 0;
					int passCount = 0;
					for( TestResult result : testResults ) {
						output.println( "  >>>>>>>>>>>>>> test " + (++testCount) + " <<<<<<<<<<<<<<<" );
						output.println( "     test name: " + result.getTestName() );
						output.println( "  running time: " + result.getElapsedTime() );
						
						if ( result.isPassed() ) {
							output.println( "   ** PASSED ** " );
							passCount++;
						} else {
							output.println( "   !! FAILED !! " );
							
							output.println( "   reason=" + result.getGradingException().getMessage() );
							output.println( " location=" + getPropperStackFrame( result.getGradingException() ) ); 
						}
						
						output.println( " " );
					}

					float passPercentage = (float) passCount / testCount * 100;
					output.printf( "** package results: " + passCount + "/" + testCount + "   pass percentage: %.2f%n", passPercentage );
					output.println( "** End Test Package = " + key + "\n\n");
 				}
				
				output.println( "-- End Grade Report ------------------------------------------" );
				
				oStream.flush();
				closeStream( oStream );
			} catch( IOException ex ) {
				System.err.println("ERROR WRITING REPORT: " + ex.getMessage() );
				ex.printStackTrace( System.err );
			}
		}
	
	}

	public abstract OutputStream getStream( String studentId ) throws IOException;
	
	public abstract void closeStream( OutputStream stream );
	
}
